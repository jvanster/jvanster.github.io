{
  "hash": "a0a5d71fdf559a85949f75da98bbf59e",
  "result": {
    "markdown": "---\ntitle: \"Building Databases\"\nauthor: \"James Van Slyke\"\n---\n\n\n### Scientific Notation\n\nWhen you first get R and R Studio set up, it may be using scientific notation to express larger numbers. So you'll see numbers like this \n$$\n5.234e+10\n$$\nThis is a type of exponent, which is in a scientific notation format. Here's a simpler example to understand what this means. Let's start with a number like 28.\n\nIn scientific notation this would look like \n$$\n2.8e+01\n$$ \nOr in an exponential form more familiar \n$$\n2.8x10^1\n$$ \nSo it's 2.8 times 10 to the first power. 280 Would look like this \n$$\n2.8e+02/\nor/\n2.8x10^2\n$$ \nIt's basically an easier way to represent larger numbers like 280 million (280,000,000) \n$$\n2.8e+08/\nor/\n2.8x10^8\n$$ \nTo turn this off this setting do the following\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen = 999)\n```\n:::\n\n\nIf you want to turn it back on, do this\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen = 0)\n```\n:::\n\n\n### More work on databases\n\nLet's make up a database based on covid figures from the *New York Times*.\n\n1.  Create your objects\n2.  Make sure to use quotations for objects that are names or titles (Remember these are categorical variables)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCountries <- c(\"United States\", \"India\", \"Brazil\", \"Russia\", \"UK\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTotal_Cases  <- c(24249722, 10581837,8511770,3574330, 3466849)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTotal_Deaths <- c(400810, 152556, 210299,65632,91470)\n```\n:::\n\n\nThen you can use the data.frame command to put them all together\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCovid <- data.frame(Countries, Total_Cases, Total_Deaths)\n```\n:::\n\n\nYou could actually do all these steps at the same time\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCovid_Again <- data.frame(Countries = c(\"United States\", \"India\", \n                          \"Brazil\", \"Russia\", \"UK\"), \n                          Total_Cases  = c(24249722, 10581837,8511770,\n                                           3574330, 3466849),  \n                          Total_Deaths = c(400810, 152556, 210299,65632,91470))\n```\n:::\n\n\nAnother nice way to make a dataset is by using a *tibble*\n\nThis is part of the tidyverse package and simplifies the code somewhat. Notice that the command to make a tibble is actually *tribble*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCovid_TR <- tribble(\n            ~Countries, ~Total_Cases, ~Total_Deaths, \n            \"United States\", 24249722, 400810, \n            \"India\", 10581837, 152556, \n            \"Brazil\", 8511770, 210299, \n            \"Russia\", 3574330, 65632, \n            \"UK\", 3466849, 91470\n)\n```\n:::\n\n\nA tibble is nice because it sets it up more like a spreadsheet.\n\nNotice that the *\\~* specifies the columns or variables and then the rest are like rows.\n\n### Manipulate Data\n\nMortality rate is total deaths divided by the total number of cases. You can use R to calculate this for you and then create the object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMortality_Rate <-  c(Total_Deaths/Total_Cases)\n```\n:::\n\n\nThen we can add all four variables together to remake our covid data.frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCovid <- data.frame(Countries,Total_Cases,Total_Deaths,Mortality_Rate)\n```\n:::\n\n\nTidyverse supplies some other helps here if we are using tibbles.\n\nWe can use *mutate* to add in the other variable based on a computation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCovid_TR <- mutate(Covid_TR, Mortality_Rate = Total_Deaths/Total_Cases)\n```\n:::\n\n\nWe can use *rename* to change the name of our variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCovid_TR <- rename(Covid_TR, Mortality = Mortality_Rate)\n```\n:::\n\n\nYou can practice this on your own.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}