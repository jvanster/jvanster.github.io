{
  "hash": "b83a025920825c7feca89a765e45b93e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Intro to R & R Studio\"\nauthor: \"James Van Slyke\"\n---\n\n\n*R* is the base program for R Studio, it does all the calculations, while *R studio* is the addition of several windows around R that helps with your analysis\n\nIn R Studio, \"R\" performs calculations in the *console*. The console is in the lower left window. You can think of the console as a big calculator. You can do all the basics with R.\n\nThe *Editor* is where you write the code and notes to yourself in *scripts*. The console is where you code gets entered and run and the *output* is in the lower right hand corner. The upper left hand window is the *environment* and keeps track of the data and other things used in your analysis.\n\nHere is a picture of what the program looks like and the different sections.\n\n![](https://d33wubrfki0l68.cloudfront.net/8a64bb047429d7ae0e2acae35c40e421e6439bf6/80e5d/diagrams/rstudio-editor.png)\n\n### Basic Calculations using R\n\nAddition\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA <- 3\nB <- 2\nA + B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\nSubtraction\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA = 15\nB = 5\nA - B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\nMultiplication\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA <-  55\nB <-  22\nA * B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1210\n```\n\n\n:::\n:::\n\n\nDivision\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA = 30\nB = 5\nA / B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nExponent\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA = 10\nB <- 10\nA ^ B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1e+10\n```\n\n\n:::\n:::\n\n\nYou'll notice that the numbers are being saved as what's called an *object*. An object is anything you save in R that is related to data or output of a calculation. You can save calculations, databases, words or lots of other stuff.\n\nIf you look in the upper right window, under the environment tab, you should notice an *x* there based on your last calculation. The environment tab saves all the saved objects you are working with in R.\n\n**Here's a couple of examples of objects for you to try**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nWord <- \"Word\"\nNumber <- 1\nCalculation <- 3+2 \n```\n:::\n\n\nNotice that when you call up a calculation it gives you the answer, not the formula\n\n## Vectors\n\nBesides individual numbers your can also create vectors or arrays of numbers, which are a set of number that are saved in an object\n\nHere is a basic vector of numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVector <- c(23, 26, 45, 22, 43, 91, 82, 12, 57, 2)\n```\n:::\n\n\n### Special Vectors\n\nYou can create a sequence of numbers without needing to write them all down. Just list the first and last number of the sequence in your code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSequence <- seq(1,10)\n```\n:::\n\n\nYou can also repeat numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRepeat <- rep(10, times = 10)\n```\n:::\n\n\nAnd of course you can always store it in an object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRepeat <- rep(10, times = 25)\nRepeat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\n```\n\n\n:::\n:::\n\n\nThen you can use that to make a new database\n\nFirst we'll add a sequence of numbers to match our repeat variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSequence <- seq(1,25)\nSequence\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n```\n\n\n:::\n:::\n\n\nThen create a dataset using the *data.frame* command and include the two objects that were just recently created.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDataset <- data.frame(Repeat, Sequence)\nDataset\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Repeat Sequence\n1      10        1\n2      10        2\n3      10        3\n4      10        4\n5      10        5\n6      10        6\n7      10        7\n8      10        8\n9      10        9\n10     10       10\n11     10       11\n12     10       12\n13     10       13\n14     10       14\n15     10       15\n16     10       16\n17     10       17\n18     10       18\n19     10       19\n20     10       20\n21     10       21\n22     10       22\n23     10       23\n24     10       24\n25     10       25\n```\n\n\n:::\n:::\n\n\n# Inspecting data\n\nThere's lots of things you can do with a dataset\n\nLet's start with one that is already in the R environment ***iris***\n\nIt's a longer dataset, so we'll start with the head command that just shows the first couple of rows\n\nThe top rows and columns of the dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n:::\n\n\nWe can look at the types of data we have using the *str* command\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n:::\n\n\nNotice we have 2 data types, numbers and what are called \"factors\"\n\nFactors are typically categories of something. In this case, types of iris flowers.\n\nWe can check on the names of each of our variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n```\n\n\n:::\n:::\n\n\nWe can look at the row names\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"1\"   \"2\"   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\"  \"11\"  \"12\" \n [13] \"13\"  \"14\"  \"15\"  \"16\"  \"17\"  \"18\"  \"19\"  \"20\"  \"21\"  \"22\"  \"23\"  \"24\" \n [25] \"25\"  \"26\"  \"27\"  \"28\"  \"29\"  \"30\"  \"31\"  \"32\"  \"33\"  \"34\"  \"35\"  \"36\" \n [37] \"37\"  \"38\"  \"39\"  \"40\"  \"41\"  \"42\"  \"43\"  \"44\"  \"45\"  \"46\"  \"47\"  \"48\" \n [49] \"49\"  \"50\"  \"51\"  \"52\"  \"53\"  \"54\"  \"55\"  \"56\"  \"57\"  \"58\"  \"59\"  \"60\" \n [61] \"61\"  \"62\"  \"63\"  \"64\"  \"65\"  \"66\"  \"67\"  \"68\"  \"69\"  \"70\"  \"71\"  \"72\" \n [73] \"73\"  \"74\"  \"75\"  \"76\"  \"77\"  \"78\"  \"79\"  \"80\"  \"81\"  \"82\"  \"83\"  \"84\" \n [85] \"85\"  \"86\"  \"87\"  \"88\"  \"89\"  \"90\"  \"91\"  \"92\"  \"93\"  \"94\"  \"95\"  \"96\" \n [97] \"97\"  \"98\"  \"99\"  \"100\" \"101\" \"102\" \"103\" \"104\" \"105\" \"106\" \"107\" \"108\"\n[109] \"109\" \"110\" \"111\" \"112\" \"113\" \"114\" \"115\" \"116\" \"117\" \"118\" \"119\" \"120\"\n[121] \"121\" \"122\" \"123\" \"124\" \"125\" \"126\" \"127\" \"128\" \"129\" \"130\" \"131\" \"132\"\n[133] \"133\" \"134\" \"135\" \"136\" \"137\" \"138\" \"139\" \"140\" \"141\" \"142\" \"143\" \"144\"\n[145] \"145\" \"146\" \"147\" \"148\" \"149\" \"150\"\n```\n\n\n:::\n:::\n\n\nWe can create a table of a particular variable\n\nWe specify the variable we want by using the \\$ sign\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(iris$Species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n    setosa versicolor  virginica \n        50         50         50 \n```\n\n\n:::\n:::\n\n\nNotice that it automatically makes a table of the counts of each iris type\n\nAnytime we want to look at a specific variable from a dataset, we use the \\$ sign. Notice when you type in the dataset name followed by the \\$ you'll see a little pop-up with all the variables. Just scroll through and select the one you want.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Sepal.Width\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 3.5 3.0 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 3.7 3.4 3.0 3.0 4.0 4.4 3.9 3.5\n [19] 3.8 3.8 3.4 3.7 3.6 3.3 3.4 3.0 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2\n [37] 3.5 3.6 3.0 3.4 3.5 2.3 3.2 3.5 3.8 3.0 3.8 3.2 3.7 3.3 3.2 3.2 3.1 2.3\n [55] 2.8 2.8 3.3 2.4 2.9 2.7 2.0 3.0 2.2 2.9 2.9 3.1 3.0 2.7 2.2 2.5 3.2 2.8\n [73] 2.5 2.8 2.9 3.0 2.8 3.0 2.9 2.6 2.4 2.4 2.7 2.7 3.0 3.4 3.1 2.3 3.0 2.5\n [91] 2.6 3.0 2.6 2.3 2.7 3.0 2.9 2.9 2.5 2.8 3.3 2.7 3.0 2.9 3.0 3.0 2.5 2.9\n[109] 2.5 3.6 3.2 2.7 3.0 2.5 2.8 3.2 3.0 3.8 2.6 2.2 3.2 2.8 2.8 2.7 3.3 3.2\n[127] 2.8 3.0 2.8 3.0 2.8 3.8 2.8 2.8 2.6 3.0 3.4 3.1 3.0 3.1 3.1 3.1 2.7 3.2\n[145] 3.3 3.0 2.5 3.0 3.4 3.0\n```\n\n\n:::\n:::\n\n\n### Dataframes\n\nMany times we work with datasets using dataframes, which creates an object very similar to a spreadsheet. Notice that when we create a dataframe and add variables to it, the letter **c** is used before the parentheses, which basically tells R that what follows should be added to the object/variable before it.\n\nHere is a sample dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDataframe <- data.frame(Words = c(\"One\", \"Two\", \"Three\", \"Four\"),\n                        Numbers = c(1,2,3,4))\n```\n:::\n\n\nInspect It\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Words Numbers\n1   One       1\n2   Two       2\n3 Three       3\n4  Four       4\n```\n\n\n:::\n:::\n\n\n\nThere's actually lots of ways to make datasets and we can always import data, which we will learn later.\n\n# Different class types in r\n\n*Numeric* means number\n\n*Integer* means a number that is not a fraction\n\ncheck it out\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.numeric(4.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis.integer(4.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n*Characters* are strings or words\n\ncheck it out\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.character(\"Word\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis.character(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n*Factors* are categories as I described earlier, it can be ordered (like an ordinal scale) or non-ordered\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n:::\n\n\n# The basic structure of R commands\n\nTheir are four main elements of every R code\n\n1.  objects\n2.  functions\n3.  arguments\n4.  operators\n\nBasic Structure\n\n![](https://go-bayes.github.io/psych-447/posts/2_1/syntax.png)\n\nThe function mean generates the arithmetic mean of some object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(iris$Sepal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.843333\n```\n\n\n:::\n:::\n\n\nOr we can find the standard deviation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(iris$Sepal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8280661\n```\n\n\n:::\n:::\n\n\nWe can also get a summary of the variable or the dataset as a whole\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(iris$Sepal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.300   5.100   5.800   5.843   6.400   7.900 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n```\n\n\n:::\n:::\n\n\n# Packages\n\nWhen you first install r studio you get all the basics, but sometimes you need other \"packages\" that provide different tools.\n\nOne package we use often is the \"tidyverse\" package\n\n1.  To install it, simply go to the bottom right window and click on packages\n2.  Type the package you are looking for in the search bar and check the package and R Studio will install it.\n3.  If the package you are looking for isn't in the list, click on \"Install\" and you can search for it in the Repository \\[CRAN\\], which is like a cloud system.\n\n### Scripts\n\nAlthough the console does the calculations, we usually write the code in \"scripts\" or text that includes the code and our annotations about it (i.e. notes to ourselves)\n\nYou can cut and paste from the website whatever you'd like into your scripts and then modify to help with your own learning.\n\nTo start a new script\n\n1.  In the upper right corner, click on the blank paper icon with a white plus sign on a green background.\n2.  Then click on the \"R Script\" option, which will create a new R script document.\n\nThen you can write you code in scripts with notes and then run the code in the console.\n\nHere's two examples of good vs. bad code\n\n#### Bad code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1<-data.frame(a=rnorm(10,1,1),b=rnorm(10,4,8),c=rnorm(10,8,1),d=rnorm(10,7,2))\n```\n:::\n\n\n#### Good code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- data.frame(\n  a = rnorm( 10, mean = 1, sd = 1 ),\n  b = rnorm( 10, mean = 4, sd = 8 ),\n  c = rnorm( 10, mean = 8, sd = 1 ),\n  d = rnorm( 10, mean = 7, sd = 2 )\n)\n```\n:::\n\n\nNotice how by adding rows, you can improve the look and understanding of what's happening in the code\n\nAnytime you type a \"\\#\" that part of the text will not be calculated by r. Here's an example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Here's how to find the mean\nmean(iris$Sepal.Width)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.057333\n```\n\n\n:::\n:::\n\n\nSo you can use *hashmarks* \"\\#\" to write notes to yourself about the code you are using. Once you've typed in your code into the script you can hit CTRL+Return to send the code to the console and run it to get your output.\n\nIt's a great way to teach yourself and remember what you learned and use the code again when you are in a similar situation.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}