{"title":"Intro to R & R Studio","markdown":{"yaml":{"title":"Intro to R & R Studio","author":"James Van Slyke"},"headingText":"Basic Calculations using R","containsRefs":false,"markdown":"\n\n*R* is the base program for R Studio, it does all the calculations, while *R studio* is the addition of several windows around R that helps with your analysis\n\nIn R Studio, \"R\" performs calculations in the *console*. The console is in the lower left window. You can think of the console as a big calculator. You can do all the basics with R.\n\nThe *Editor* is where you write the code and notes to yourself in *scripts*. The console is where you code gets entered and run and the *output* is in the lower right hand corner. The upper left hand window is the *environment* and keeps track of the data and other things used in your analysis.\n\nHere is a picture of what the program looks like and the different sections.\n\n![](https://d33wubrfki0l68.cloudfront.net/8a64bb047429d7ae0e2acae35c40e421e6439bf6/80e5d/diagrams/rstudio-editor.png)\n\n\nAddition\n\n```{r, eval=TRUE}\nA <- 3\nB <- 2\nA + B\n```\n\nSubtraction\n\n```{r, eval=TRUE}\nA = 15\nB = 5\nA - B\n```\n\nMultiplication\n\n```{r, eval=TRUE}\nA <-  55\nB <-  22\nA * B\n```\n\nDivision\n\n```{r, eval=TRUE}\nA = 30\nB = 5\nA / B\n```\n\nExponent\n\n```{r, eval=TRUE}\nA = 10\nB <- 10\nA ^ B\n```\n\nYou'll notice that the numbers are being saved as what's called an *object*. An object is anything you save in R that is related to data or output of a calculation. You can save calculations, databases, words or lots of other stuff.\n\nIf you look in the upper right window, under the environment tab, you should notice an *x* there based on your last calculation. The environment tab saves all the saved objects you are working with in R.\n\n**Here's a couple of examples of objects for you to try**\n\n```{r, eval=TRUE}\nWord <- \"Word\"\nNumber <- 1\nCalculation <- 3+2 \n```\n\nNotice that when you call up a calculation it gives you the answer, not the formula\n\n## Vectors\n\nBesides individual numbers your can also create vectors or arrays of numbers, which are a set of number that are saved in an object\n\nHere is a basic vector of numbers\n\n```{r}\nVector <- c(23, 26, 45, 22, 43, 91, 82, 12, 57, 2)\n```\n\n### Special Vectors\n\nYou can create a sequence of numbers without needing to write them all down. Just list the first and last number of the sequence in your code\n\n```{r, eval=TRUE}\nSequence <- seq(1,10)\n```\n\nYou can also repeat numbers\n\n```{r, eval=TRUE}\nRepeat <- rep(10, times = 10)\n```\n\nAnd of course you can always store it in an object\n\n```{r, eval=TRUE}\nRepeat <- rep(10, times = 25)\nRepeat\n```\n\nThen you can use that to make a new database\n\nFirst we'll add a sequence of numbers to match our repeat variable\n\n```{r, eval=TRUE}\nSequence <- seq(1,25)\nSequence\n```\n\nThen create a dataset using the *data.frame* command and include the two objects that were just recently created.\n\n```{r, eval=TRUE}\nDataset <- data.frame(Repeat, Sequence)\nDataset\n```\n\n# Inspecting data\n\nThere's lots of things you can do with a dataset\n\nLet's start with one that is already in the R environment ***iris***\n\nIt's a longer dataset, so we'll start with the head command that just shows the first couple of rows\n\nThe top rows and columns of the dataset\n\n```{r, eval=TRUE}\nhead(iris)\n```\n\nWe can look at the types of data we have using the *str* command\n\n```{r, eval=TRUE}\nstr(iris)\n```\n\nNotice we have 2 data types, numbers and what are called \"factors\"\n\nFactors are typically categories of something. In this case, types of iris flowers.\n\nWe can check on the names of each of our variables\n\n```{r, eval=TRUE}\nnames(iris)\n```\n\nWe can look at the row names\n\n```{r, eval=TRUE}\nrownames(iris)\n```\n\nWe can create a table of a particular variable\n\nWe specify the variable we want by using the \\$ sign\n\n```{r, eval=TRUE}\ntable(iris$Species)\n```\n\nNotice that it automatically makes a table of the counts of each iris type\n\nAnytime we want to look at a specific variable from a dataset, we use the \\$ sign. Notice when you type in the dataset name followed by the \\$ you'll see a little pop-up with all the variables. Just scroll through and select the one you want.\n\n```{r, eval=TRUE}\niris$Sepal.Width\n```\n\n### Dataframes\n\nMany times we work with datasets using dataframes, which creates an object very similar to a spreadsheet. Notice that when we create a dataframe and add variables to it, the letter **c** is used before the parentheses, which basically tells R that what follows should be added to the object/variable before it.\n\nHere is a sample dataset\n\n```{r, eval=TRUE}\nDataframe <- data.frame(Words = c(\"One\", \"Two\", \"Three\", \"Four\"),\n                        Numbers = c(1,2,3,4))\n```\n\nInspect It\n\n```{r, eval=TRUE}\nDataframe\n```\n\n\nThere's actually lots of ways to make datasets and we can always import data, which we will learn later.\n\n# Different class types in r\n\n*Numeric* means number\n\n*Integer* means a number that is not a fraction\n\ncheck it out\n\n```{r, eval=TRUE}\nis.numeric(4.2)\n```\n\n```{r, eval=TRUE}\nis.integer(4.2)\n```\n\n*Characters* are strings or words\n\ncheck it out\n\n```{r, eval=TRUE}\nis.character(\"Word\")\n```\n\n```{r, eval=TRUE}\nis.character(4)\n```\n\n*Factors* are categories as I described earlier, it can be ordered (like an ordinal scale) or non-ordered\n\n```{r, eval=TRUE}\nstr(iris)\n```\n\n# The basic structure of R commands\n\nTheir are four main elements of every R code\n\n1.  objects\n2.  functions\n3.  arguments\n4.  operators\n\nBasic Structure\n\n![](https://go-bayes.github.io/psych-447/posts/2_1/syntax.png)\n\nThe function mean generates the arithmetic mean of some object\n\n```{r, eval=TRUE}\nmean(iris$Sepal.Length)\n```\n\nOr we can find the standard deviation\n\n```{r, eval=TRUE}\nsd(iris$Sepal.Length)\n```\n\nWe can also get a summary of the variable or the dataset as a whole\n\n```{r, eval=TRUE}\nsummary(iris$Sepal.Length)\n```\n\n```{r, eval=TRUE}\nsummary(iris)\n```\n\n# Packages\n\nWhen you first install r studio you get all the basics, but sometimes you need other \"packages\" that provide different tools.\n\nOne package we use often is the \"tidyverse\" package\n\n1.  To install it, simply go to the bottom right window and click on packages\n2.  Type the package you are looking for in the search bar and check the package and R Studio will install it.\n3.  If the package you are looking for isn't in the list, click on \"Install\" and you can search for it in the Repository \\[CRAN\\], which is like a cloud system.\n\n### Scripts\n\nAlthough the console does the calculations, we usually write the code in \"scripts\" or text that includes the code and our annotations about it (i.e. notes to ourselves)\n\nYou can cut and paste from the website whatever you'd like into your scripts and then modify to help with your own learning.\n\nTo start a new script\n\n1.  In the upper right corner, click on the blank paper icon with a white plus sign on a green background.\n2.  Then click on the \"R Script\" option, which will create a new R script document.\n\nThen you can write you code in scripts with notes and then run the code in the console.\n\nHere's two examples of good vs. bad code\n\n#### Bad code\n\n```{r}\ndf1<-data.frame(a=rnorm(10,1,1),b=rnorm(10,4,8),c=rnorm(10,8,1),d=rnorm(10,7,2))\n```\n\n#### Good code\n\n```{r}\ndf1 <- data.frame(\n  a = rnorm( 10, mean = 1, sd = 1 ),\n  b = rnorm( 10, mean = 4, sd = 8 ),\n  c = rnorm( 10, mean = 8, sd = 1 ),\n  d = rnorm( 10, mean = 7, sd = 2 )\n)\n```\n\nNotice how by adding rows, you can improve the look and understanding of what's happening in the code\n\nAnytime you type a \"\\#\" that part of the text will not be calculated by r. Here's an example\n\n```{r}\n# Here's how to find the mean\nmean(iris$Sepal.Width)\n```\n\nSo you can use *hashmarks* \"\\#\" to write notes to yourself about the code you are using. Once you've typed in your code into the script you can hit CTRL+Return to send the code to the console and run it to get your output.\n\nIt's a great way to teach yourself and remember what you learned and use the code again when you are in a similar situation.\n","srcMarkdownNoYaml":"\n\n*R* is the base program for R Studio, it does all the calculations, while *R studio* is the addition of several windows around R that helps with your analysis\n\nIn R Studio, \"R\" performs calculations in the *console*. The console is in the lower left window. You can think of the console as a big calculator. You can do all the basics with R.\n\nThe *Editor* is where you write the code and notes to yourself in *scripts*. The console is where you code gets entered and run and the *output* is in the lower right hand corner. The upper left hand window is the *environment* and keeps track of the data and other things used in your analysis.\n\nHere is a picture of what the program looks like and the different sections.\n\n![](https://d33wubrfki0l68.cloudfront.net/8a64bb047429d7ae0e2acae35c40e421e6439bf6/80e5d/diagrams/rstudio-editor.png)\n\n### Basic Calculations using R\n\nAddition\n\n```{r, eval=TRUE}\nA <- 3\nB <- 2\nA + B\n```\n\nSubtraction\n\n```{r, eval=TRUE}\nA = 15\nB = 5\nA - B\n```\n\nMultiplication\n\n```{r, eval=TRUE}\nA <-  55\nB <-  22\nA * B\n```\n\nDivision\n\n```{r, eval=TRUE}\nA = 30\nB = 5\nA / B\n```\n\nExponent\n\n```{r, eval=TRUE}\nA = 10\nB <- 10\nA ^ B\n```\n\nYou'll notice that the numbers are being saved as what's called an *object*. An object is anything you save in R that is related to data or output of a calculation. You can save calculations, databases, words or lots of other stuff.\n\nIf you look in the upper right window, under the environment tab, you should notice an *x* there based on your last calculation. The environment tab saves all the saved objects you are working with in R.\n\n**Here's a couple of examples of objects for you to try**\n\n```{r, eval=TRUE}\nWord <- \"Word\"\nNumber <- 1\nCalculation <- 3+2 \n```\n\nNotice that when you call up a calculation it gives you the answer, not the formula\n\n## Vectors\n\nBesides individual numbers your can also create vectors or arrays of numbers, which are a set of number that are saved in an object\n\nHere is a basic vector of numbers\n\n```{r}\nVector <- c(23, 26, 45, 22, 43, 91, 82, 12, 57, 2)\n```\n\n### Special Vectors\n\nYou can create a sequence of numbers without needing to write them all down. Just list the first and last number of the sequence in your code\n\n```{r, eval=TRUE}\nSequence <- seq(1,10)\n```\n\nYou can also repeat numbers\n\n```{r, eval=TRUE}\nRepeat <- rep(10, times = 10)\n```\n\nAnd of course you can always store it in an object\n\n```{r, eval=TRUE}\nRepeat <- rep(10, times = 25)\nRepeat\n```\n\nThen you can use that to make a new database\n\nFirst we'll add a sequence of numbers to match our repeat variable\n\n```{r, eval=TRUE}\nSequence <- seq(1,25)\nSequence\n```\n\nThen create a dataset using the *data.frame* command and include the two objects that were just recently created.\n\n```{r, eval=TRUE}\nDataset <- data.frame(Repeat, Sequence)\nDataset\n```\n\n# Inspecting data\n\nThere's lots of things you can do with a dataset\n\nLet's start with one that is already in the R environment ***iris***\n\nIt's a longer dataset, so we'll start with the head command that just shows the first couple of rows\n\nThe top rows and columns of the dataset\n\n```{r, eval=TRUE}\nhead(iris)\n```\n\nWe can look at the types of data we have using the *str* command\n\n```{r, eval=TRUE}\nstr(iris)\n```\n\nNotice we have 2 data types, numbers and what are called \"factors\"\n\nFactors are typically categories of something. In this case, types of iris flowers.\n\nWe can check on the names of each of our variables\n\n```{r, eval=TRUE}\nnames(iris)\n```\n\nWe can look at the row names\n\n```{r, eval=TRUE}\nrownames(iris)\n```\n\nWe can create a table of a particular variable\n\nWe specify the variable we want by using the \\$ sign\n\n```{r, eval=TRUE}\ntable(iris$Species)\n```\n\nNotice that it automatically makes a table of the counts of each iris type\n\nAnytime we want to look at a specific variable from a dataset, we use the \\$ sign. Notice when you type in the dataset name followed by the \\$ you'll see a little pop-up with all the variables. Just scroll through and select the one you want.\n\n```{r, eval=TRUE}\niris$Sepal.Width\n```\n\n### Dataframes\n\nMany times we work with datasets using dataframes, which creates an object very similar to a spreadsheet. Notice that when we create a dataframe and add variables to it, the letter **c** is used before the parentheses, which basically tells R that what follows should be added to the object/variable before it.\n\nHere is a sample dataset\n\n```{r, eval=TRUE}\nDataframe <- data.frame(Words = c(\"One\", \"Two\", \"Three\", \"Four\"),\n                        Numbers = c(1,2,3,4))\n```\n\nInspect It\n\n```{r, eval=TRUE}\nDataframe\n```\n\n\nThere's actually lots of ways to make datasets and we can always import data, which we will learn later.\n\n# Different class types in r\n\n*Numeric* means number\n\n*Integer* means a number that is not a fraction\n\ncheck it out\n\n```{r, eval=TRUE}\nis.numeric(4.2)\n```\n\n```{r, eval=TRUE}\nis.integer(4.2)\n```\n\n*Characters* are strings or words\n\ncheck it out\n\n```{r, eval=TRUE}\nis.character(\"Word\")\n```\n\n```{r, eval=TRUE}\nis.character(4)\n```\n\n*Factors* are categories as I described earlier, it can be ordered (like an ordinal scale) or non-ordered\n\n```{r, eval=TRUE}\nstr(iris)\n```\n\n# The basic structure of R commands\n\nTheir are four main elements of every R code\n\n1.  objects\n2.  functions\n3.  arguments\n4.  operators\n\nBasic Structure\n\n![](https://go-bayes.github.io/psych-447/posts/2_1/syntax.png)\n\nThe function mean generates the arithmetic mean of some object\n\n```{r, eval=TRUE}\nmean(iris$Sepal.Length)\n```\n\nOr we can find the standard deviation\n\n```{r, eval=TRUE}\nsd(iris$Sepal.Length)\n```\n\nWe can also get a summary of the variable or the dataset as a whole\n\n```{r, eval=TRUE}\nsummary(iris$Sepal.Length)\n```\n\n```{r, eval=TRUE}\nsummary(iris)\n```\n\n# Packages\n\nWhen you first install r studio you get all the basics, but sometimes you need other \"packages\" that provide different tools.\n\nOne package we use often is the \"tidyverse\" package\n\n1.  To install it, simply go to the bottom right window and click on packages\n2.  Type the package you are looking for in the search bar and check the package and R Studio will install it.\n3.  If the package you are looking for isn't in the list, click on \"Install\" and you can search for it in the Repository \\[CRAN\\], which is like a cloud system.\n\n### Scripts\n\nAlthough the console does the calculations, we usually write the code in \"scripts\" or text that includes the code and our annotations about it (i.e. notes to ourselves)\n\nYou can cut and paste from the website whatever you'd like into your scripts and then modify to help with your own learning.\n\nTo start a new script\n\n1.  In the upper right corner, click on the blank paper icon with a white plus sign on a green background.\n2.  Then click on the \"R Script\" option, which will create a new R script document.\n\nThen you can write you code in scripts with notes and then run the code in the console.\n\nHere's two examples of good vs. bad code\n\n#### Bad code\n\n```{r}\ndf1<-data.frame(a=rnorm(10,1,1),b=rnorm(10,4,8),c=rnorm(10,8,1),d=rnorm(10,7,2))\n```\n\n#### Good code\n\n```{r}\ndf1 <- data.frame(\n  a = rnorm( 10, mean = 1, sd = 1 ),\n  b = rnorm( 10, mean = 4, sd = 8 ),\n  c = rnorm( 10, mean = 8, sd = 1 ),\n  d = rnorm( 10, mean = 7, sd = 2 )\n)\n```\n\nNotice how by adding rows, you can improve the look and understanding of what's happening in the code\n\nAnytime you type a \"\\#\" that part of the text will not be calculated by r. Here's an example\n\n```{r}\n# Here's how to find the mean\nmean(iris$Sepal.Width)\n```\n\nSo you can use *hashmarks* \"\\#\" to write notes to yourself about the code you are using. Once you've typed in your code into the script you can hit CTRL+Return to send the code to the console and run it to get your output.\n\nIt's a great way to teach yourself and remember what you learned and use the code again when you are in a similar situation.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Intro to R.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"visual","theme":{"light":"minty","dark":"darkly"},"title":"Intro to R & R Studio","author":"James Van Slyke"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}