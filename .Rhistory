#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(75, 99)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 1000) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#| echo: false
#Specify mean and standard deviation
population_mean <- 110
population_sd <- 8
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 1000) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(1, 2.1)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 1000) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(1, 2.1)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 1000) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(1.10, 2.1)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 1000) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(1.55, 2.1)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 1000) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(1.55, 2.1)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 1000) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(2.1, 1.55)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 1000) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(1, 2.10)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 500) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 1000) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 500) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(1, 2.10)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 250) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(1, 2.10)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 10000) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(1, 2.10)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#| echo: false
#Specify mean and standard deviation
population_mean <- 2.9
population_sd <- 0.45
#define upper and lower bound
lower_bound <- population_mean - population_sd
upper_bound <- population_mean + population_sd
#Create a sequence of 1000 x values based on population mean and standard deviation
x <- seq(-4, 4, length = 50) * population_sd + population_mean
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x, population_mean, population_sd)
#plot normal distribution with customized x-axis labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "",
ylab = "")
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
sd_axis_bounds * population_sd + population_mean,
by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
#Shade area
x_adj <- seq(1, 2.10)
y_adj <- dnorm(x_adj, population_mean, population_sd)
polygon(c(x_adj, rev(x_adj)),
c(y_adj, rep(0, length(y_adj))),
col = adjustcolor('red', alpha=0.3), border = NA)
#Libraries
library(tidyverse)
library(fivethirtyeight)
?fivethirtyeight
?bechdel
data(package = "fivethirtyeight")
trump_approval_poll
glimpse(trump_approval_poll)
ggplot(trump_approval_poll) +
geom_line(aes(x = start_date, y = approve))
trump_approval_poll |>
filter(start_date >= as.Date("2017-01-20") &
start_date <= as.Date("2017-05-20")) a |>
trump_approval_poll |>
filter(start_date >= as.Date("2017-01-20") &
start_date <= as.Date("2017-05-20")) |>
ggplot(trump_approval_poll) +
geom_line(aes(x = start_date, y = approve))
trump_approval_poll |>
filter(start_date >= as.Date("2017-01-20") &
start_date <= as.Date("2017-05-20")) |>
ggplot() +
geom_line(aes(x = start_date, y = approve))
trump_approval_poll |>
filter(start_date >= as.Date("2017-01-20") &
start_date <= as.Date("2017-03-20")) |>
ggplot() +
geom_line(aes(x = start_date, y = approve))
trump_approval_poll |>
filter(start_date >= as.Date("2017-01-20") &
start_date <= as.Date("2017-02-20")) |>
ggplot() +
geom_line(aes(x = start_date, y = approve))
#Create a population of 250 million
pop_size <- 250000000
#Create the approval/disapproval ratings
possible_entries <- c(rep("approve", 0.60 * pop_size),
rep("disapprove", 0.40 * pop_size))
#Randomly Sample 1000 from the population
sampled_entries <- sample(possible_entries, size = 1000)
#Create a population of 250 million
pop_size <- 250000000
#Create the approval/disapproval ratings
possible_entries <- c(rep("approve", 0.60 * pop_size),
rep("disapprove", 0.40 * pop_size))
#Randomly Sample 1000 from the population
sampled_entries <- sample(possible_entries, size = 1000)
sum(sampled_entries == "approve")/1000
#Sample
sampled_entries <- sample(possible_entries, size = 1000)
#p-hat
sum(sampled_entries == "approve")/1000
#Sample
sampled_entries <- sample(possible_entries, size = 1000)
#p-hat
sum(sampled_entries == "approve")/1000
#Sample
sampled_entries <- sample(possible_entries, size = 1000)
#p-hat
sum(sampled_entries == "approve")/1000
#Sample
sampled_entries <- sample(possible_entries, size = 1000)
#p-hat
sum(sampled_entries == "approve")/1000
#Sample
sampled_entries <- sample(possible_entries, size = 1000)
#p-hat
sum(sampled_entries == "approve")/1000
pnorm(.6)
1 - pnorm(.6)
?pnorm
1 - pnorm((186-174)/sqrt(32))
(186-174)/sqrt(32)
(186-174)/(sqrt(32))
pnorm((186-174)/sqrt(32))
1 - pnorm((186-174)/32)
3*365
1 - pnorm((27.34-27.02)/sqrt(4796))
1 - pnorm((27.34-27.02)/(sqrt(4796))
1 - pnorm((27.34-27.02)/(sqrt(4796))
1 - pnorm((27.34-27.02)/(sqrt(4796))
1 - pnorm((27.34-27.02)/(sqrt(4796)))
1 - pnorm((27.34-27.02)/(sqrt(4796)))
1 - pnorm((27.34-27.02)/(4796))
quarto::quarto_render("Point Estimates and Proportions.qmd", output_format = "html")
#| include: false
#Libraries
library(tidyverse)
library(fivethirtyeight)
quarto::quarto_render("Point Estimates and Proportions.qmd", output_format = "html")
install.packages("quarto")
quarto::quarto_render("Point Estimates and Proportions.qmd", output_format = "html")
quarto::quarto_render("Point Estimates and Proportions.qmd", output_format = "html")
# Parameters
n_samples <- 10000   # Number of samples
sample_size <- 1000  # Size of each sample
true_p <- 0.6        # True proportion of "approve"
#Use the binomial to simulate this
# Simulate sample counts of "approve"
sample_counts <- rbinom(n = n_samples, size = sample_size,
prob = true_p)
# Calculate p-hat (sample proportion)
p_hats <- sample_counts / sample_size
library(ggplot2)
# Convert to data frame for plotting
p_hat_df <- data.frame(p_hat = p_hats)
# Create histogram
ggplot(p_hat_df, aes(x = p_hat)) +
geom_histogram(binwidth = 0.005, fill = "skyblue", color = "black") +
labs(title = "Sampling Distribution of p̂",
x = "Sample Proportion (p̂)",
y = "Frequency") +
theme_minimal()
?rbinom
#Set the Parameters
n_samples <- 10000   # Number of samples
sample_size <- 1000  # Size of each sample
true_p <- 0.6        # True proportion of "approve"
#Use a randomly generated binomial distribution to simulate taking 10,000 samples with an n = 1000 from the population of the US
sample_counts <- rbinom(n = n_samples, size = sample_size, prob = true_p)
# Calculate the p-hat from the samples
p_hats <- sample_counts / sample_size
# Create a datafrome of the p-hats
p_hat_df <- data.frame(p_hat = p_hats)
# Create histogram
ggplot(p_hat_df, aes(x = p_hat)) +
geom_histogram(binwidth = 0.005, fill = "skyblue", color = "black") +
labs(title = "Sampling Distribution of p̂",
x = "Sample Proportion (p̂)",
y = "Frequency") +
theme_minimal()
#Set the Parameters
n_samples <- 10000   # Number of samples
sample_size <- 1000  # Size of each sample
true_p <- 0.6        # True proportion of "approve"
#Use a randomly generated binomial distribution to simulate taking 10,000 samples with an n = 1000 from the population of the US
sample_counts <- rbinom(n = n_samples, size = sample_size, prob = true_p)
# Calculate the p-hat from the samples
p_hats <- sample_counts / sample_size
# Create a datafrome of the p-hats
p_hat_df <- data.frame(p_hat = p_hats)
# Create histogram
phat_hist <- ggplot(p_hat_df, aes(x = p_hat)) +
geom_histogram(binwidth = 0.005, fill = "skyblue", color = "black") +
labs(title = "Sampling Distribution of p̂",
x = "Sample Proportion (p̂)",
y = "Frequency") +
theme_minimal()
phat_hist
mean(p_hat_df$p_hat)
